clear;

%% Setting paths
root_dir = fullfile('ds_rz');

img_dir = fullfile(root_dir,'rgb_dir');
lbl_dir = fullfile(root_dir,'lbl_dir');

%% Setting datastores

img_ds = imageDatastore(img_dir);


classes = {'Backgronud','Hand'};
classes_label = [0 1];

lbl_ds = pixelLabelDatastore(lbl_dir,...
    classes,classes_label ...
    );

%% Data agumentation

agumenter = imageDataAugmenter(...
    'RandXReflection',true,...
    'RandYReflection',true,...
    'RandRotation',[-180 180],...
    'RandScale',[0.5 1.5],...
    'RandXTranslation',[-50 50],...
    'RandYTranslation',[-50 50]...
    );

img_lbl_ds = pixelLabelImageDatastore(img_ds,lbl_ds,...
    'DataAugmentation',agumenter...
    );

%% Split data in validation and test 

[test,val,train] = split_PLID(img_lbl_ds,0,0.2,0.8);

%% Count of pixel stadistic for initial weights setting
tbl=countEachLabel(lbl_ds);

frec= tbl.PixelCount/sum(tbl.PixelCount);
imFrec= tbl.PixelCount ./ tbl.ImagePixelCount;

classWeights = median(imFrec) ./ imFrec;

%% Network options 

imSize = [240 320 3];

numClasses = numel(classes);

lgraph = deeplabv3plusLayers(imSize, numClasses, 'resnet18');

pxLayer = pixelClassificationLayer('Name','labels', 'Classes', tbl.Name, 'ClassWeights', classWeights);
lgraph = replaceLayer(lgraph,"classification",pxLayer);

mkdir checkpoint;

options = trainingOptions('sgdm', ...
    'LearnRateSchedule','piecewise',...%si lo queremos fijo->> fixed
    'LearnRateDropPeriod',5,...%cada cuantas epocas se modifica el learning rate
    'LearnRateDropFactor',0.1,...
    'Momentum',0.9, ...
    'InitialLearnRate',1e-3, ...
    'L2Regularization',0.005, ...
    'ValidationData',val ,...
    'MaxEpochs',20, ...  
    'MiniBatchSize',2, ...
    'Shuffle','every-epoch', ...
    'CheckpointPath', 'checkpoint/', ...
    'VerboseFrequency',2,...
    'Plots','training-progress',...
    'ValidationPatience', 4, ...
    'ValidationFrequency',20 ...
    );

%% Trainning
[net, info] = trainNetwork(train,lgraph,options);